# 第六届蓝桥杯校内选拔赛大学A组

### 1.

f(x+1,y)，f(x,y+1)



大概就是简单的动态规划。。

### 2.

3.15

### 3.

2.506184

暴力查找

### 4.

74151643752362

同样暴力

### 5.

```c++
#include <iostream>
using namespace std;
typedef long long ll;
int main()
{
	int ans = 0;
	ll n;
	cin>>n;
	ll n2=n*n;
	for(ll i = 1; i < n; i++)
	{
		ll j=sqrt(n2-i*i);
		if(j*j+i*i==n2) 
			ans++;
	}
	cout<<ans/2;
	return 0;
}

```

还是暴力。。

### 6.

```C++
#include<iostream>
using namespace std;
int map[10][10];

int range(int n)
{
	if (n >= 1 && n <= 3) return 1;
	else if (n >= 4 && n <= 6) return 4;
	else return 7;
}

bool check(int x, int y, int n)
{
	for (int i = 1; i <= 9; i++)
	{
		if (map[x][i] == n || map[i][y] == n) return false;
	}
	int r = range(x);
	int c = range(y);
	for (int i = r; i <= r + 2; i++)
	{
		for (int j = c; j <= c + 2; j++)
		{
			if (map[i][j] == n) return false;
		}
	}
	return true;
}

void dfs(int x, int y)
{
	if (y > 9)
	{
		for (int i = 1; i <= 9; i++)
		{
			for (int j = 1; j <= 9; j++)
			{
				cout << map[i][j];
			}
			cout << endl;
		}
		exit(0);
	}
	if (map[x][y] == 0)
	{
		for (int i = 1; i <= 9; i++)
		{
			if (check(x, y, i))
			{
				map[x][y] = i;
				dfs((x + 1) % 10, y + (x + 1) / 10);
				map[x][y] = 0;
			}
		}
	}
	else dfs((x + 1) % 10, y + (x + 1) / 10);
}

int main()
{
	for (int i = 1; i <= 9; i++)
	{
		string s;
		cin >> s;
		for (int j = 0; j < 9; j++)
		{
			if (s[j] != '0') map[i][j + 1] = s[j] - '0';
		}
	}
	dfs(1,1);
	return 0;
}
```

先离散化，然后进行一个dfs

### 7.

```c++
#include<iostream>
using namespace std;
int sol_sup[100005];
bool vis[100005];
int n;
int ans;

bool check(int idx)
{
	if (vis[sol_sup[idx]]) return false;
	return true;
}

void choose(int sum, int need, int idx)
{
	if (sum == need)
	{
		ans++;
		return;
	}
	for (int i = idx + 1; i <= n; i++)
	{
		if (check(i))
		{
			vis[i] = 1;
			choose(sum + 1, need, i);
			vis[i] = 0;
		}
	}
}

int main()
{
	cin >> n;
	sol_sup[1] = 1;
	for (int i = 2; i <= n; i++) cin >> sol_sup[i];

	for (int i = 1; i <= n; i++)
	{
		memset(vis, 0, sizeof(vis));
		choose(0, i, 0);
	}

	cout << ans;
	return 0;
}
```

同样是个dfs
